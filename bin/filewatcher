#!/usr/bin/env ruby
require 'rubygems'
require_relative '../lib/filewatcher'
require 'trollop'
require 'pathname'
require 'thread'

options = Trollop::options do
  version "filewatcher, version #{FileWatcher.VERSION} by Thomas Flemming 2015"
  banner <<-EOS
Filewatcher scans the filesystem and executes shell commands when files changes.

Usage:
   filewatcher [--restart] '<filenames or patterns>' '<shell command>'
Where
   filename: filename(s) to scan.
   shell command: shell command to execute when file changes on disk.

Examples:
   filewatcher "myfile" "echo 'myfile has changed'"
   filewatcher '*.rb' 'ruby $FILENAME'
   filewatcher '**/*.rb' 'ruby $FILENAME' # Watch subdirectories
Options:
EOS

  opt :dontwait, "Do not wait for filesystem updates before running", :short => 'd', :type => :boolean, :default => false
  opt :restart, "Restart process when filesystem is updated", :short => 'r', :type => :boolean, :default => false
  opt :list, "Print name of files being watched"
  opt :exec, "Execute file as a script when file is updated.", :short => 'e', :type => :boolean, :default => false
  opt :include, "Include files", :type => :string, :default => "*"
  opt :exclude, "Exclude file(s) matching", :type => :string, :default => ""
  opt :interval, "Interval to scan filesystem.", :short => 'i', :type => :float, :default => 0.5
  opt :spinner, "Show an ascii spinner", :short => 's', :type => :boolean, :default => false
end

Trollop::die Trollop::educate if(ARGV.size == 0)

files = []
ARGV[0...-1].each do |a|
  files << a
end

if(ARGV.length == 1)
  files << ARGV[0]
end

def split_files_void_escaped_whitespace(files)
  splitted_filenames = []
  files.each do |name|
    name = name.gsub(/\\\s/,'_ESCAPED_WHITESPACE_')
    splitted_filenames << name.split(/\s/)
  end
  files = splitted_filenames.flatten.uniq
  splitted_filenames = []
  files.each do |name|
    splitted_filenames << name.gsub('_ESCAPED_WHITESPACE_','\ ')
  end
  files = splitted_filenames
end

files = split_files_void_escaped_whitespace(files)

def restart(child_pid, env, cmd)
  Process.kill(9,child_pid)
  Process.wait(child_pid)
rescue Errno::ESRCH
  # already killed
ensure
  child_pid = Process.spawn(env, cmd)
end

if(options[:restart])
  rd, wr = IO.pipe
  child_pid = nil
end

# TODO Test this:
if(options[:exclude])
  exclude_files = split_files_void_escaped_whitespace(options[:exclude])
  options[:exclude] = exclude_files
  pp exclude_files
  exit
end

begin
  fw = FileWatcher.new(files, options)

  # TODO Test this:
  if(options[:list])
    fw.filename.each do |filename|
      puts filename if options[:list]
    end
  end
  
  fw.watch(options[:interval]) do |filename, event|
    cmd = nil
    if(options[:exec] and File.exist?(filename))
      extension = filename[/(\.[^\.]*)$/,0]
      runners = {
        ".py" => "python",
        ".js" => "node",
        ".rb" => "ruby",
        ".pl" => "perl",
        ".awk" => "awk",
        ".php" => "php",
        ".phtml" => "php",
        ".php4" => "php",
        ".php3" => "php",
        ".php5" => "php",
        ".phps" => "php"
      }
      runner = runners[extension]
      if(runner)
        cmd = "env #{runner.to_s} #{filename}"
      end
    elsif(ARGV.length > 1)
      cmd = ARGV[-1]
    end

    if(cmd)
      path = Pathname.new(filename)
      env = {
        'FILENAME'=> path.to_s,
        'FILEDIR' => File.join(Pathname.new('.').realpath.to_s, path.parent.to_s),
        'FSEVENT' => event.to_s
      }
      if(event != :delete)
        ENV['FILEPATH'] = path.realpath.to_s
      end

      if(options[:restart])
        if(child_pid == nil)
          child_pid = Process.spawn(env, cmd)
        else
          child_id = restart(child_pid, env, cmd)
        end
      else
        begin
          pid = Process.spawn(env, cmd)
          Process.wait()
        rescue SystemExit, Interrupt
          exit(0)
        end
      end

    else
      case(event)
      when :changed
        print "file updated"
      when :delete
        print "file deleted"
      when :new
        print "new file"
      else
        print event.to_s
      end
      puts ": " + filename
    end

  end
rescue SystemExit, Interrupt
  fw.finalize
end
