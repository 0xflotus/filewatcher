#!/usr/bin/env ruby
require 'rubygems'
require File.expand_path('../lib/filewatcher.rb', File.dirname(__FILE__))
require 'trollop'
require 'pathname'
require 'thread'

options = Trollop.options do
  version "filewatcher, version #{FileWatcher::VERSION} by Thomas Flemming 2016"
  banner <<-EOS
Filewatcher scans the filesystem and executes shell commands when files changes.

Usage:
   filewatcher [--restart] '<filenames or patterns>' '<shell command>'
Where
   filename: filename(s) to scan.
   shell command: shell command to execute when file changes on disk.

Examples:
   filewatcher "myfile" "echo 'myfile has changed'"
   filewatcher '*.rb' 'ruby $FILENAME'
   filewatcher '**/*.rb' 'ruby $FILENAME' # Watch subdirectories

Other available environment variables are BASENAME, ABSOLUTE_FILENAME,
RELATIVE_FILENAME, EVENT and DIRNAME.

Options:
EOS

  opt :immediate, 'Immediately execute a command',
      short: 'I', type: :boolean, default: false
  opt :every, 'Run command for every updated file in one filesystem check',
      short: 'E', type: :boolean, default: false
  opt :daemon, 'Run in the background as system daemon',
      short: 'D', type: :boolean, default: false
  opt :restart, 'Restart process when filesystem is updated',
      short: 'r', type: :boolean, default: false
  opt :list, 'Print name of files being watched'
  opt :exec, 'Execute file as a script when file is updated',
      short: 'e', type: :boolean, default: false
  opt :include, 'Include files',
      type: :string, default: '*'
  opt :exclude, 'Exclude file(s) matching',
      type: :string, default: ''
  opt :interval, 'Interval to scan filesystem',
      short: 'i', type: :float, default: 0.5
  opt :delay, 'Delay before a command will be executed again',
      short: 'd', type: :float, default: 0.0
  opt :spinner, 'Show an ascii spinner',
      short: 's', type: :boolean, default: false
end

Trollop.die Trollop.educate if ARGV.size.zero?

files = []
ARGV[0...-1].each do |a|
  files << a
end

files << ARGV[0] if ARGV.length == 1

def split_files_void_escaped_whitespace(files)
  files
    .map { |name| name.gsub(/\\\s/, '_ESCAPED_WHITESPACE_').split(/\s/) }
    .flatten
    .uniq
    .map { |name| name.gsub('_ESCAPED_WHITESPACE_', '\ ') }
end

files = split_files_void_escaped_whitespace(files)
child_pid = nil

def restart(child_pid, env, cmd)
  raise Errno::ESRCH unless child_pid
  Process.kill(9, child_pid)
  Process.wait(child_pid)
rescue Errno::ESRCH
  nil # already killed
ensure
  Process.spawn(env, cmd)
end

if options[:exclude] != ''
  options[:exclude] = split_files_void_escaped_whitespace(
    options[:exclude].split(' ')
  )
end

def build_env(filename, event)
  path = Pathname.new(filename)
  ENV['FILEPATH'] = path.realpath.to_s if event != :deleted
  {
    'FILENAME' => filename,
    'BASENAME' => path.basename.to_s,
    'EVENT' => event.to_s,
    'DIRNAME' => path.parent.realpath.to_s,
    'ABSOLUTE_FILENAME' => path.realpath.to_s,
    'RELATIVE_FILENAME' => File.join('.', path)
  }
end

## Define runners for `--exec` option
class Filewatcher
  @runners = {
    python: %w(py),
    node: %w(js),
    ruby: %w(rb),
    perl: %w(pl),
    awk: %w(awk),
    php: %w(php phtml php4 php3 php5 phps)
  }

  def self.runner_command(filename)
    ext = File.extname(filename).delete('.')
    runner = @runners.find { |_cmd, exts| exts.include? ext }
    "env #{runner.first} #{filename}" if runner
  end
end

begin
  fw = FileWatcher.new(files, options)

  if options[:list]
    puts 'Watching:'
    fw.last_found_filenames.each do |filename|
      puts " #{filename}"
    end
  end

  Process.daemon(true, true) if options[:daemon]

  fw.watch(options[:interval]) do |changes|
    changes = changes.first(1) unless options[:every]
    changes.each do |filename, event|
      cmd =
        if options[:exec] && File.exist?(filename)
          Filewatcher.runner_command(filename)
        elsif ARGV.length > 1
          ARGV[-1]
        end

      next puts "file #{event}: #{filename}" unless cmd

      env = build_env(filename, event)
      if options[:restart]
        child_pid = restart(child_pid, env, cmd)
      else
        begin
          Process.spawn(env, cmd)
          Process.wait
        rescue SystemExit, Interrupt
          exit(0)
        end
      end
    end
  end
rescue SystemExit, Interrupt
  fw.finalize
end
