#!/usr/bin/env ruby
require 'rubygems'
require 'filewatcher'
require 'trollop'
require 'pathname'

options = Trollop::options do
  version "filewatcher, version #{FileWatcher.VERSION} by Thomas Flemming 2014"
  banner <<-EOS
Filewatcher scans filesystem and execute shell commands when files changes.

Usage:
   filewatcher [-i interval] "<filenames>" "<shell commands>"
Where
   filename: filename(s) to scan.
   shell command: shell command to execute when file changes on disk.

Examples:
   filewatcher "myfile" "echo 'myfile has changed'"
   filewatcher '*.rb' 'ruby $FILENAME'

Options:
EOS

  opt :interval, "Interval to scan filesystem. Defaults to 0.5 seconds.", :short => 'i', :type => :float, :default => 0.5
  opt :exec, "Execute file as a script when file is updated.", :short => 'e', :type => :boolean, :default => false
  opt :recurse, "Recurse into the directory, watching everything matching 'expression'", :short => 'r', :type => :string
  opt :include, "Include files", :type => :string, :default => "*"
  opt :exclude, "Exclude file(s) matching", :type => :string, :default => ""
  opt :list, "Print name of files being watched"
end

Trollop::die "must have at least one argument" if(ARGV.size == 0)

files = []
ARGV[0...-1].each do |a|
  files << a
end

if(ARGV.length == 1)
  files << ARGV[0]
end

if(options[:recurse])
  base = File.join(options[:recurse], "**")
  inc = Dir.glob(File.join(base, options[:include]))
  exc = Dir.glob(File.join(base, options[:exclude]))
  files = inc - exc
end

def split_files_void_escaped_whitespace(files)
  splitted_filenames = []
  files.each do |name|
    name = name.gsub(/\\\s/,'_ESCAPED_WHITESPACE_')
    splitted_filenames << name.split(/\s/)
  end
  files = splitted_filenames.flatten.uniq
  splitted_filenames = []
  files.each do |name|
    splitted_filenames << name.gsub('_ESCAPED_WHITESPACE_','\ ')
  end
  files = splitted_filenames
end

files = split_files_void_escaped_whitespace(files)

FileWatcher.new(files, options[:list]).watch(options[:interval]) do |filename, event|
  cmd = nil
  if(options[:exec] and File.exist?(filename))
    extension = filename[/(\.[^\.]*)$/,0]
    runners = {
      ".py" => "python",
      ".js" => "node",
      ".rb" => "ruby",
      ".pl" => "perl",
      ".awk" => "awk",
      ".php" => "php",
      ".phtml" => "php",
      ".php4" => "php",
      ".php3" => "php",
      ".php5" => "php",
      ".phps" => "php"
    }
    runner = runners[extension]
    if(runner)
      cmd = "env #{runner.to_s} #{filename}"
    end
  elsif(ARGV.length > 1)
    cmd = ARGV[-1]
  end

  if(cmd)
    path = Pathname.new(filename)
    env = {
      'FILENAME'=> path.to_s,
      'FILEDIR' => path.parent.realpath.to_s,
      'FSEVENT' => event.to_s
    }
    if(event != :delete)
      ENV['FILEPATH'] = path.realpath.to_s
    end
    pid = Process.spawn(env, cmd);
    pid = Process.wait();
  else
    case(event)
    when :changed
      print "file updated"
    when :delete
      print "file eleted"
    when :new
      print "new file"
    else
      print event.to_s
    end
    puts ": " + filename
  end

end
